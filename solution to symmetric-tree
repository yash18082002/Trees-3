// Time Complexity : worst case is O(n)
// Space Complexity : O(h) where h is the height of the tree
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// using dfs, travel all the nodes in the tree and compare the mirror nodes

class Solution {
    boolean isSymmetric;
    public boolean isSymmetric(TreeNode root) {
        if(root == null) {
            return true;
        }
        isSymmetric = true;
        dfs(root.left, root.right);
        return isSymmetric;
    }
    private void dfs(TreeNode left, TreeNode right) {
        if(left == null && right == null) {
            return;
        }
        if(left == null || right == null) {
            isSymmetric = false;
            return;
        }
        if(left.val != right.val) {
            isSymmetric = false;
            return;
        }
        dfs(left.left, right.right);
        dfs(left.right, right.left);
    }
}
